package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.example.demo.exceptions.BadUserException;
import com.example.demo.exceptions.UserNotFoundException;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

import java.util.regex.*;

import javax.validation.Valid;

@RestController
public class UserController {

	@Value("${password_check_regex}")
	String regex;
	
	private Pattern pattern;
	private Matcher matcher;
	
	
	private final UserRepository repository;
	public UserController(UserRepository repository) {
		this.repository = repository;
	}
	
	@GetMapping("/user/{username}/{pwd}")
	public User getUser(@PathVariable String username, @PathVariable String pwd) {
		try {
			return repository.findByUsernameAndPwd(username, pwd);
		} catch(UserNotFoundException exc) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User Not Found", exc);
		}
	}
	
	@PostMapping("/user")
	public User addUser(@RequestBody User user) {
		
//		System.out.println((user.getPwd()).matches(regex));
//		
//		//pattern = Pattern.compile(regex);
//		if(((user.getPwd()).matches(regex)) == true) {
//			System.out.println("matched!");
//			return repository.save(user);
//		}
//		System.out.println("Sorry!");
		try {
			System.out.println("hi");
			pattern = Pattern.compile(regex);
			if(pattern.matcher(user.getPwd()).matches()) {
				System.out.println("matched!");
				return repository.save(user);
			}
		} catch (BadUserException exc) {
			throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Bad User", exc);
		}
		return null;
	}
	
	
}
